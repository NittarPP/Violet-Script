local Starlight = loadstring(game:HttpGet("https://raw.nebulasoftworks.xyz/starlight"))()  

local NebulaIcons = loadstring(game:HttpGet("https://raw.nebulasoftworks.xyz/nebula-icon-library-loader"))()

local Notifications = Starlight:Notification({
    Title = "Violet Notification",
    Icon = NebulaIcons:GetIcon('sparkle', 'Material'),
    Content = "[ Violet Script ] Will start in 3s",
}, "INDEX")

wait(3)

local executorName = identifyexecutor and identifyexecutor() or getexecutorname and getexecutorname() or "Unknown"
local gameid = game.PlaceId

local success, SupportGameList = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/NittarPP/Violet-Script/refs/heads/main/setting/game-support.lua"))()
end)

if success and type(SupportGameList) == "table" then
    local found = false
    for _, id in ipairs(SupportGameList) do
            Starlight:Destroy()
            found = true
            local link = "https://raw.githubusercontent.com/NittarPP/Violet-Script/refs/heads/main/script/" .. gameid .. ".lua" or "https://raw.githubusercontent.com/NittarPP/Violet-Script/refs/heads/main/script/" .. gameid
            loadstring(game:HttpGet(link))()
            break
        end
    end
    if not found then
        warn("Game not supported: " .. tostring(gameid))
        local Notifications = Starlight:Notification({
            Title = "Violet Notification",
            Icon = NebulaIcons:GetIcon('sparkle', 'Material'),
            Content = "[ Violet Script ] Game not supported: " .. tostring(gameid),
        }, "INDEX")
    end
else
     local Notifications = Starlight:Notification({
        Title = "Violet Notification",
        Icon = NebulaIcons:GetIcon('sparkle', 'Material'),
        Content = "[ Violet Script ] Failed to get game-support.lua",
     }, "INDEX")
end
